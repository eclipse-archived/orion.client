<project name="WebIDERequireJS customTargets overrides" >
	<!--
	Required properties
	======================================================================
		${builder}           Path to the org.eclipse.orion.client/releng/builder/ folder
		${requirejsHome}     Path to the folder where r.js can be found.
		${nodejsHome}        Path to the folder where `node` binary lives.
		${buildConfig}       Path to the RequireJS build config file for the product (eg. orion.build.js).
		${buildDirectory}    Path to the directory where build will be performed.
		${orionClient}       Path to the orion client repo. Optimized Orion page code is copied back into here.

	Optional properties
	======================================================================
		${skipOrionUI}      If set, the Orion pages and plugins will not be built
		${skipCommitBrowser}   If set, the git commit browser widget will not be generated 
		${skipEditor}       If set, the standalone editor will not be generated
		${skipEmbeddedEditor}       If set, the embedded editor will not be generated
		${skipEditorStylers}       If set, the standalone editor stylers will not be generated
		${skipCompareEditor}       If set, the standalone compare editor will not be generated
	-->

	<property name="super" value="Build specific targets and properties" />
	<property name="widgetOutDirectory" value="${buildDirectory}/built-js" />
	<property name="staging" value="${buildDirectory}/staging" />
	<property name="optimized" value="${buildDirectory}/optimized" />
	<property name="node" location="${nodejsHome}/node" />

	<target name="updateBuildLabel" if="buildLabel">
	    <echo message="Updating build label..."/>
		<replace dir="${buildDirectory}" includes="pluginVersions.properties,featureVersions.properties"  >
			<replacefilter token="HEAD" value="${buildLabel}" />
			<replacefilter token="origin/master" value="${buildLabel}" />
		</replace>
		<!-- Build Id in Orion page footer -->
		<replace dir="${buildDirectory}" includes="**/web/orion/nls/root/messages.js"  >
			<replacefilter token="@buildLabel@" value="${buildLabel}" />
		</replace>
	</target>

	<scriptdef name="fingerprintModules" language="javascript" src="${builder}/scripts/fingerprintModules.js">
		<attribute name="buildfile" />
		<attribute name="todir" />
	</scriptdef>
	<target name="fingerprint" unless="skipFingerprint">
		<fingerprintModules todir="${out}" buildfile="${buildfile}" />
	</target>

	<scriptdef name="stageBundles" language="javascript" src="${builder}/scripts/stageBundles.js">
		<attribute name="buildfile" />
		<attribute name="todir" />
	</scriptdef>

	<scriptdef name="copyBackBundles" language="javascript" src="${builder}/scripts/copyBackBundles.js">
		<attribute name="buildfile" />
		<attribute name="out" />
	</scriptdef>

	<!-- Copy the optimized files for bundle @{bundle} from the output folder @{out} back into the bundle. --> 
	<target name="copybackBundle">
		<!-- params: bundle, out -->
		<property name="bundle.fullpath" location="${bundle}" />
		<property name="out.fullpath" location="${out}" />

		<!-- For each JS file in this bundle we need 3 optimized files: {foo}.js, {foo}.js.map, {foo}.js.src.js
		We build the list of JS files from ${bundle}, but the actual optimized files are in ${out}. So we
		construct a set of relative paths to the optimized files, which we can apply against ${out} later.
		-->
		<pathconvert property="optimized.paths" pathsep=",">
			<fileset dir="${bundle.fullpath}">
				<include name="**/*.js" />
				<exclude name="**/node_modules/" />
			</fileset>
			<chainedmapper>
				<!-- strip off leading bundle/web/ to get relative path -->
				<globmapper from="${bundle.fullpath}/*" to="*" handledirsep="true" />
				<compositemapper>
					<identitymapper />
					<globmapper from="*" to="*.map" />
					<globmapper from="*" to="*.src.js" />
					<scriptmapper language="javascript">
						var s = new Packages.java.io.File(source).getName();
						s = s.replaceAll("(.*).js", "$1.*.js");
						var parent = new Packages.java.io.File(source).getParent();
						if (parent) {
							self.addMappedName(new Packages.java.io.File(parent.toString(), s));
						} else {
							self.addMappedName(s);
						}
					</scriptmapper>
				</compositemapper>
			</chainedmapper>
		</pathconvert>

		<!-- Evaluate the relative paths against @{out} and copy the resulting files back into our bundle folder. -->
		<copy todir="${bundle}">
			<!-- TODO: this breaks if a filename contains comma or space -->
			<fileset dir="${out}" includes="${optimized.paths}" />
		</copy>
	</target>

	<!-- Replaces any references to the unminified `require.js` with the minified `require.min.js` in the bundles -->
	<scriptdef name="updateRequire" language="javascript" src="${builder}/scripts/updateRequire.js">
		<attribute name="buildfile" />
	</scriptdef>

	<!-- If Node.js seems to work then set node.ok -->
	<macrodef name="checkNode">
		<sequential>
			<exec executable="${node}" failonerror="false" failifexecutionfails="false" resultproperty="node.exit">
				<arg value="-e" />
				<arg value="''" />
			</exec>
			<if>
				<equals arg1="${node.exit}" arg2="0" />
				<then>
					<property name="node.ok" value="true" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- Runs r.js. Caller provides arguments to r.js in the nested <args> element. -->
	<macrodef name="rjs">
		<element name="args" />
		<sequential>
			<property name="requirejs" location="${requirejsHome}/r.js" />
			<checkNode />
			<if>
				<isset property="node.ok" />
				<then>
					<echo message="Running ${node}..." />
					<exec executable="${node}" dir="${staging}" failonerror="true">
						<arg value="${requirejs}"/>
						<args />
					</exec>
				</then>
				<else>
					<echo message="Running Nashorn..." />
					<exec executable="jjs" dir="${staging}" failonerror="true">
						<arg value="-scripting" />
						<arg value="${requirejs}"/>
						<arg value="--" />
						<args />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="orionOptimize" unless="skipOrionUI">
		<!-- $staging: Input folder for r.js -->
		<!-- $out:     Output folder of r.js -->
		<!-- $buildfile: r.js build config -->
		<sequential>
			<echo message="Building Orion pages and plugins from ${staging} to ${out} using ${buildfile}..."/>
			<rjs>
				<args>
					<arg value="-o" />
					<arg value="${buildfile}"/>
					<arg value="appDir=${staging}" />
					<arg value="baseUrl=./" />
					<arg value="dir=${out}" />
				</args>
			</rjs>

			<antcall target="fingerprint">
				<param name="buildfile" value="${buildfile}" />
				<param name="todir" value="${out}" />
			</antcall>
			<copyBackBundles buildfile="${buildfile}" out="${out}" />
			<updateRequire buildfile="${buildfile}" />
		</sequential>
	</target>

	<target name="widget.check">
		<condition property="widget.run">
			<or>
				<not><isset property="skipCommitBrowser" /></not>
				<not><isset property="skipEditor" /></not>
				<not><isset property="skipCompareEditor" /></not>
				<not><isset property="skipEmbeddedEditor" /></not>
			</or>
		</condition>
	</target>

	<!-- Clean widget output directory -->
	<target name="widgetClean" depends="widget.check" if="widget.run">
		<delete dir="${widgetOutDirectory}" />
		<mkdir dir="${widgetOutDirectory}" />

		<!--
			Copy editor build files to ${staging} to make editorOptimize simpler. cssIn paths must be 
			relative to the build file location, and having build file location == ${staging} is easier.
		-->
		<copy todir="${staging}" overwrite="true">
			<fileset dir="${builder}/scripts" includes="*build*.js,*.frag" />
		</copy>
	</target>
	
	<target name="editorStylersOptimize" unless="skipEditorStylers">
		<stylerOptimizeFile out="${out}"
			optimize="uglify2" />
		<move todir="${out}/stylers.min" includeemptydirs="false">
			<fileset dir="${out}/stylers">
				<include name="**/syntax.js"/>
			</fileset>
			<!-- dirsep is needed on Windows for / to match \ -->
			<globmapper from="*/syntax.js" to="*/syntax.min.js" handledirsep="true" />
		</move>
		<stylerOptimizeFile out="${out}"
			optimize="none" />
		<move todir="${out}/stylers" includeemptydirs="false">
			<fileset dir="${out}/stylers.min">
				<include name="**/syntax.min.js"/>
			</fileset>
		</move>

		<delete dir="${out}/stylers.min"/>
	</target>

	<target name="editorOptimize" unless="skipEditor">
		<sequential>
			<antcall target="editorStylersOptimize"/>

			<copy todir="${out}/themes" includeemptydirs="false">
 				<fileset dir="${staging}/orion/editor/themes">
					<include name="**/*.css"/>
				</fileset>
 			</copy>

			<!-- Editor -->
			<widgetOptimizeFile out="${out}/built-editor.css"
				buildfile="${staging}/editor.build-css.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-editor-amd.min.js"
				buildfile="${staging}/editor.build-js.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-editor-amd.js"
				buildfile="${staging}/editor.build-js.js"
				optimize="none" />
			<widgetOptimizeFile out="${out}/built-editor.min.js"
				buildfile="${staging}/editor.build.almond-js.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-editor.js"
				buildfile="${staging}/editor.build.almond-js.js"
				optimize="none" />
			<move todir="${out}/sourcemaps">
				<fileset dir="${out}" includes="*editor*.map, *editor*.src.js" />
			</move>
			
			<!-- Content Assist -->
			<widgetOptimizeFile out="${out}/htmlContentAssist.min.js"
				buildfile="${staging}/contentassist.html.build.almond-js.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/cssContentAssist.min.js"
				buildfile="${staging}/contentassist.css.build.almond-js.js"
				optimize="uglify2" />
			<move todir="${out}/contentAssist/sourcemaps">
				<fileset dir="${out}" includes="*ContentAssist*.map, *ContentAssist*.src.js" />
			</move>
			<move todir="${out}/contentAssist">
				<fileset dir="${out}" includes="*ContentAssist*.js" />
			</move>

			<zip destFile="${out}/built-editor.zip"
				basedir="${out}"
				includes="built-editor.css, built-editor-amd.min.js, built-editor-amd.js, built-editor.min.js, built-editor.js,
					sourcemaps/*, stylers/**/*, themes/*, contentAssist/*"
				excludes="stylers/build.txt" />
		</sequential>
	</target>
				
	<target name="embeddedEditorOptimize" unless="skipEmbeddedEditor">
		<sequential>
			<mkdir dir="${out}/codeEdit" />
			<mkdir dir="${out}/codeEdit/code_edit" />
			<mkdir dir="${out}/codeEdit/javascript" />
			<mkdir dir="${out}/codeEdit/orion" />
			<mkdir dir="${out}/codeEdit/webtools" />
			<mkdir dir="${out}/codeEdit/plugins" />
			<mkdir dir="${out}/codeEdit/requirejs" />
			<mkdir dir="${out}/codeEdit/javascript/plugins" />
			<mkdir dir="${out}/codeEdit/webtools/plugins" />
			<mkdir dir="${out}/codeEdit/others" />
			<mkdir dir="${out}/codeEdit/others/plugins" />
			<mkdir dir="${out}/codeEdit/others/plugins/languages" />
			<mkdir dir="${out}/codeEdit/others/plugins/languages/json" />
			<widgetOptimizeFile out="${out}/codeEdit/code_edit/built-codeEdit.css"
				buildfile="${staging}/embeddedEditor.build-css.js"
				optimize="uglify2" />
			<embeddedEditorOptimizeFile out="${out}/codeEdit/code_edit/built-codeEdit.min.js"
				buildfile="${staging}/embeddedEditor.build.js"
				optimize="uglify2" />
			<embeddedEditorOptimizeFile out="${out}/codeEdit/code_edit/built-codeEdit.js"
				buildfile="${staging}/embeddedEditor.build.js"
				optimize="none" />
			<embeddedEditorAMDOptimizeFile out="${out}/codeEdit/code_edit/built-codeEdit-amd.min.js"
				buildfile="${staging}/embeddedEditor.build.js"
				optimize="uglify2" />
			<embeddedEditorAMDOptimizeFile out="${out}/codeEdit/code_edit/built-codeEdit-amd.js"
				buildfile="${staging}/embeddedEditor.build.js"
				optimize="none" />
			<widgetOptimizeFile out="${out}/codeEdit/javascript/plugins/javascriptPlugin.js"
				buildfile="${staging}/embeddedJavascriptPlugin.build.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/codeEdit/webtools/plugins/webToolsPlugin.js"
				buildfile="${staging}/embeddedWebtoolsPlugin.build.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/codeEdit/plugins/embeddedToolingPlugin.js"
				buildfile="${staging}/embeddedToolingPlugin.build.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/codeEdit/javascript/plugins/ternWorkerCore.js"
				buildfile="${staging}/embeddedTernWorker.build.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/codeEdit/others/plugins/languages/json/jsonPlugin.js"
				buildfile="${staging}/embeddedJsonPlugin.build.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/codeEdit/others/plugins/jslintPlugin.js"
				buildfile="${staging}/embeddedJslintPlugin.build.js"
				optimize="uglify2" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.ui/web/embeddedEditor/plugins/jsonPlugin.html" tofile="${out}/codeEdit/others/plugins/languages/json/jsonPlugin.html" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.ui/web/embeddedEditor/plugins/jslintPlugin.html" tofile="${out}/codeEdit/others/plugins/jslintPlugin.html" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.javascript/web/javascript/plugins/ternWorker.js" tofile="${out}/codeEdit/javascript/plugins/ternWorker.js" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.core/web/orion/require-config.js" tofile="${out}/codeEdit/orion/require-config.js" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.core/web/orion/requireErrorHandler.js" tofile="${out}/codeEdit/orion/requireErrorHandler.js" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.core/web/requirejs/require.min.js" tofile="${out}/codeEdit/requirejs/require.min.js" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.ui/web/embeddedEditor/plugins/javascriptPlugin.html" tofile="${out}/codeEdit/javascript/plugins/javascriptPlugin.html" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.ui/web/embeddedEditor/plugins/webToolsPlugin.html" tofile="${out}/codeEdit/webtools/plugins/webToolsPlugin.html" />
			<copy file="${orionClient}/bundles/org.eclipse.orion.client.ui/web/embeddedEditor/plugins/embeddedToolingPlugin.html" tofile="${out}/codeEdit/plugins/embeddedToolingPlugin.html" />
			<zip update="true" destfile="${out}/built-codeEdit.zip">
				<fileset dir="${out}/codeEdit" />
			</zip>
		</sequential>
	</target>

	<target name="compareOptimize" unless="skipCompareEditor">
		<sequential>
			<widgetOptimizeFile out="${out}/built-compare.css"
				buildfile="${staging}/compare.build-css.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-compare-amd.min.js"
				buildfile="${staging}/compare.build-js.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-compare-amd.js"
				buildfile="${staging}/compare.build-js.js"
				optimize="none" />
			<widgetOptimizeFile out="${out}/built-compare.min.js"
				buildfile="${staging}/compare.build.almond-js.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-compare.js"
				buildfile="${staging}/compare.build.almond-js.js"
				optimize="none" />
			<copy todir= "${out}" >
				<fileset dir="${orionClient}/bundles/org.eclipse.orion.client.ui/web/font"  includes="OrionIconFont-Regular.eot, OrionIconFont-Regular.woff, OrionIconFont-Regular.ttf, OrionIconFont-Regular.svg"/>
			</copy>
			<zip destFile="${out}/built-compare.zip" basedir="${out}" includes="built-compare.css, built-compare-amd.min.js, built-compare-amd.js, built-compare.min.js, built-compare.js, OrionIconFont-Regular.eot, OrionIconFont-Regular.woff, OrionIconFont-Regular.ttf, OrionIconFont-Regular.svg" />
		</sequential>
	</target>

	<target name="commitBrowserOptimize" unless="skipCommitBrowser">
		<sequential>
			<widgetOptimizeFile out="${out}/built-commitBrowser.css"
				buildfile="${staging}/commitBrowser.build-css.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-commitBrowser.min.js"
				buildfile="${staging}/commitBrowser.build.almond-js.js"
				optimize="uglify2" />
			<widgetOptimizeFile out="${out}/built-commitBrowser.js"
				buildfile="${staging}/commitBrowser.build.almond-js.js"
				optimize="none" />
			<copy todir="${orionClient}/bundles/org.eclipse.orion.client.ui/web/gitWidgets/built" >
				<fileset dir="${out}" includes="built-commitBrowser.js, built-commitBrowser.css, built-commitBrowser.min.js"/>
			</copy>
		</sequential>
	</target>
	
	<macrodef name="widgetOptimizeFile">
		<attribute name="buildfile" />
		<attribute name="out" />
		<attribute name="optimize" />
		<sequential>
			<rjs>
				<args>
					<arg value="-o" />
					<arg value="@{buildfile}"/>
					<arg value="optimize=@{optimize}" />
					<arg value="out=@{out}"/>
					<arg value="dir=" />
				</args>
			</rjs>
		</sequential>
	</macrodef>
	
	<macrodef name="embeddedEditorAMDOptimizeFile">
		<attribute name="buildfile" />
		<attribute name="out" />
		<attribute name="optimize" />
		<sequential>
			<rjs>
				<args>
					<arg value="-o" />
					<arg value="@{buildfile}"/>
					<arg value="optimize=@{optimize}" />
					<arg value="out=@{out}"/>
					<arg value="dir=" />
					<arg value="name=embeddedEditor/builder/embeddedEditor" />
					<arg value="wrap.end=define('orion/codeEdit', ['embeddedEditor/builder/embeddedEditor'], function(p) { return p; });" />
				</args>
			</rjs>
		</sequential>
	</macrodef>

	<macrodef name="embeddedEditorOptimizeFile">
		<attribute name="buildfile" />
		<attribute name="out" />
		<attribute name="optimize" />
		<sequential>
			<rjs>
				<args>
					<arg value="-o" />
					<arg value="@{buildfile}"/>
					<arg value="optimize=@{optimize}" />
					<arg value="out=@{out}"/>
					<arg value="dir=" />
					<arg value="name=almond" />
					<arg value="include=embeddedEditor/builder/embeddedEditor" />
					<arg value="wrap.startFile=embeddedEditor.start.frag" />
					<arg value="wrap.end=return require('embeddedEditor/builder/embeddedEditor');}));" />
				</args>
			</rjs>
		</sequential>
	</macrodef>

	<macrodef name="stylerOptimizeFile">
		<attribute name="out" />
		<attribute name="optimize" />
		<sequential>
			<rjs>
				<args>
					<arg value="-o" />
					<arg value="${staging}/editor.build.stylers-js.js"/>
					<arg value="optimize=@{optimize}" />
					<arg value="appDir=${staging}/orion/editor/stylers"/>
					<arg value="baseUrl=./"/>
					<arg value="dir=@{out}/stylers" />
				</args>
			</rjs>
		</sequential>
	</macrodef>

	<!-- These 3 tasks are just for conditionally removing existing ${staging} and ${optimized} -->
	<target name="checkDirs">
		<available file="${staging}"   type="dir" property="staging.exists" />
		<available file="${optimized}" type="dir" property="optimized.exists" />
	</target>
	<target name="cleanStaging" if="staging.exists">
		<echo message="Removing ${staging}" />
		<delete>
			<fileset dir="${staging}" />
		</delete>
	</target>
	<target name="cleanOptimized" if="optimized.exists">
		<echo message="Removing ${optimized}" />
		<delete>
			<fileset dir="${optimized}" />
		</delete>
	</target>

	<target name="requirejs" depends="checkDirs, cleanStaging, cleanOptimized">
	    <echo message="requirejs build started..."/>

		<mkdir dir="${staging}" />
		<mkdir dir="${optimized}" />
		<antcall target="widgetClean">
			<param name="staging" value="${staging}" />
		</antcall>

		<!-- Stage files for optimization -->
		<stageBundles todir="${staging}" buildfile="${buildConfig}" />

		<!-- build Orion pages and plugins (unless skipOrionUI is set) -->
		<antcall target="orionOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${optimized}" />
			<param name="buildfile" value="${buildConfig}" />
		</antcall>

		<!-- build git commit widget (unless skipCommitBrowser is set) -->
		<antcall target="commitBrowserOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${widgetOutDirectory}" />
		</antcall>

		<!-- build standalone editor (unless skipEditor is set) -->
		<antcall target="editorOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${widgetOutDirectory}" />
		</antcall>

		<!-- build standalone compare editor (unless skipCompareEditor is set) -->
		<antcall target="compareOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${widgetOutDirectory}" />
		</antcall>

		<!-- build embedded editor (unless skipEmbeddedEditor is set) -->
		<antcall target="embeddedEditorOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${widgetOutDirectory}" />
		</antcall>

		<!-- copy css back -->
		<!-- TODO! this should be done automatically using the ${buildConfig} -->
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.ui/web" >
			<fileset dir="${optimized}" includes="**/*.css" excludes="git/,profile/,cfui/,help/,orion/editor/,js-tests/editor/,examples/,mocha/"/>
		</copy>
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.cf/web" >
			<fileset dir="${optimized}" includes="cfui/**/*.css" />
		</copy>
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.help/web" >
			<fileset dir="${optimized}" includes="help/**/*.css" />
		</copy>
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.git/web" >
			<fileset dir="${optimized}" includes="git/**/*.css" />
		</copy>
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.users/web" >
			<fileset dir="${optimized}" includes="profile/**/*.css" />
		</copy>
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.editor/web" >
			<fileset dir="${optimized}" includes="orion/editor/**/*.css,js-tests/editor/**/*.css,examples/**/*.css" />
		</copy>
		<copy todir="${orionClient}/bundles/org.eclipse.orion.client.core/web" >
			<fileset dir="${optimized}" includes="mocha/**/*.css" />
		</copy>
	</target>

</project>
